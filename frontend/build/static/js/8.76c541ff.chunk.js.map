{"version":3,"sources":["views/video-converter/converter-page/api.js","views/video-compressor/converter-page/target-a-file-size-components/file-size-in-mb.js","views/video-compressor/converter-page/target-a-file-size-components/file-size-in-percentage.js","views/video-compressor/converter-page/api.js","views/video-compressor/converter-page/video-compressor-dropzone-area.js","views/video-compressor/converter-page/index.js","views/components/converter-file.js","utiles/constants.js","utiles/API.js","views/components/alert.js","views/components/loder.js","utiles/file-upload-api.js"],"names":["BASE_API_URL","ENVIRONMENT_VARIABLES","converterApi","body","type","converter","a","config","headers","response","toLowerCase","_","find","Videos","video","name","API","post","obj","code","message","items","data","Audios","audio","fileDownload","file_name","fetch","then","blob","myBlob","URL","createObjectURL","Blob","link","document","createElement","href","window","download","click","FileSizeInMB","handleTargetSizeInMB","sizeInMB","Row","className","Col","xs","Form","Label","Control","size","value","onChange","Text","FileSizeInPercentage","handleTargetSizeInPercentage","sizeInPercentage","Range","min","max","htmlFor","visuallyHidden","InputGroup","id","placeholder","compressorApi","console","log","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","backgroundImage","backgroundSize","backgroundPosition","color","outline","transition","activeStyle","acceptStyle","rejectStyle","styleFile","btnColor","videoCodecValues","compressionMethodValues","VideoCompressorForm","props","useState","imageData","setImageData","isLoaded","setIsLoaded","isFileUploadOrConvert","setIsFileUploadOrConvert","videoCodec","setVideoCodec","compressionMethod","setCompressionMethod","compressionMethodIndex","setCompressionMethodIndex","setSizeInMB","setSizeInPercentage","uploadBtn","setUploadBtn","convertBtn","setConvertBtn","downloadBtn","setDownloadBtn","downloadLink","setDownloadLink","fileNameAny","setFileNameAny","fileNameWithId","setFileNameWithId","useDropzone","getRootProps","getInputProps","isDragActive","open","isDragAccept","isDragReject","style","useMemo","handleRemoveFile","removeFile","fileHandleChange","e","removeFileRes","file","target","files","handleUpload","fileUploadApi","fileUploadRes","successMessageAlert","errorMessageAlert","error","handleConvert","convertFileResponse","handleDownload","downloadedFile","disabled","onClick","fontSize","cursor","title","icon","faTimes","textAlign","Card","Header","Body","Title","borderBottom","Select","map","index","selectedIndex","Check","VideoComressorUI","path","VideoCompressorType","Mp4ToMp3","axios","create","baseURL","responseType","Swal","fire","text","Loader","marginTop","height","loading","formData","FormData","append","fileRemoveApi","fileName","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","isConfirmed"],"mappings":"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","file":"static/js/8.76c541ff.chunk.js","sourcesContent":["import API from '../../../utiles/API';\r\nimport _ from 'lodash';\r\nimport { ENVIRONMENT_VARIABLES } from '../../../utiles/constants';\r\nimport { Audios, Videos } from '../../components/converter-file';\r\nconst BASE_API_URL = ENVIRONMENT_VARIABLES.BASE_API_URL;\r\n\r\n\r\nexport async function converterApi(body, type, converter) {\r\n    let config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    };\r\n    try {\r\n        let response = {};\r\n\r\n        if (converter.toLowerCase() == \"video\") {\r\n            const is_video_converter = _.find(Videos, function (video) { return video?.name.toLowerCase() === type.toLowerCase(); });\r\n            if (is_video_converter) {\r\n                response = await API.post(`${BASE_API_URL}/file-info/video-converter?to=${type}`, body, config);\r\n            } else {\r\n                const obj = {\r\n                    code: 400,\r\n                    message: `${type} is not supported`,\r\n                    items: [],\r\n                }\r\n                response.data = obj;\r\n            }\r\n        } else if (converter.toLowerCase() == \"audio\") {\r\n            const is_audio_converter = _.find(Audios, function (audio) { return audio?.name.toLowerCase() === type.toLowerCase(); });\r\n\r\n            if (is_audio_converter) {\r\n                response = await API.post(`${BASE_API_URL}/file-info/audio-converter?to=${type}`, body, config);\r\n            } else {\r\n                const obj = {\r\n                    code: 400,\r\n                    message: `${type} is not supported`,\r\n                    items: [],\r\n                }\r\n                response.data = obj;\r\n            }\r\n        } else if (converter.toLowerCase() == \"mp4-to-mp3\") {\r\n            response = await API.post(`${BASE_API_URL}/file-info/audio-converter`, body, config);\r\n        }\r\n\r\n        return response?.data;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function fileDownload(file_name) {\r\n    let config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    };\r\n    try {\r\n        fetch(`${BASE_API_URL}file-info/download?file_name=${file_name}`)\r\n            .then(response => response.blob())\r\n            .then(function (myBlob) {\r\n                var objectURL = URL.createObjectURL(myBlob);\r\n                const blob = new Blob([myBlob]);\r\n                const link = document.createElement('a');\r\n                link.href = window.URL.createObjectURL(blob);\r\n                link.download = `${file_name}`;\r\n                link.click();\r\n\r\n            })\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}","import React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nconst FileSizeInMB = ({ handleTargetSizeInMB, sizeInMB }) => {\r\n    return (\r\n        <>\r\n            <Row className=\"mt-3\">\r\n                <Col xs={4} className=\"text-end\">\r\n                    <Form.Label>Target Size (MB)</Form.Label>\r\n                </Col>\r\n                <Col xs={8}>\r\n                    <Form.Control type=\"number\" size=\"sm\" value={sizeInMB} onChange={handleTargetSizeInMB} />\r\n                    <Form.Text className=\"text-muted\">\r\n                        Enter desired video file size in MB (Megabytes)\r\n                    </Form.Text>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FileSizeInMB;","import React from \"react\";\r\nimport { Col, Form, FormControl, InputGroup, Row } from \"react-bootstrap\";\r\n\r\nconst FileSizeInPercentage = ({ handleTargetSizeInPercentage, sizeInPercentage }) => {\r\n    return (\r\n        <>\r\n            <Row className=\"mt-3\">\r\n                <Col xs={4} className=\"text-end\">\r\n                    <Form.Label>Select Target Size (%)</Form.Label>\r\n                </Col>\r\n                <Col xs={8}>\r\n                    <Row>\r\n                        <Col xs={6}>\r\n                            <Form.Range type=\"text\" size=\"sm\" min=\"1\" max=\"100\" value={sizeInPercentage} onChange={handleTargetSizeInPercentage} />\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                            <Form.Label htmlFor=\"inlineFormInputGroup\" visuallyHidden>\r\n\r\n                            </Form.Label>\r\n                            <InputGroup className=\"mb-2\">\r\n                                <Form.Control type=\"number\" min=\"1\" max=\"100\" id=\"inlineFormInputGroup\" placeholder=\"File size percentage value\" value={sizeInPercentage} onChange={handleTargetSizeInPercentage} />\r\n                                <InputGroup.Text>%</InputGroup.Text>\r\n                            </InputGroup>\r\n                        </Col>\r\n                        <Form.Text className=\"text-muted\">\r\n                            Select a target file size as a percentage of the original. Smaller values compress more. For example, a 100Mb file would become 25Mb if you select 25%.\r\n                        </Form.Text>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FileSizeInPercentage;","import API from '../../../utiles/API';\r\nimport _ from 'lodash';\r\nimport { ENVIRONMENT_VARIABLES } from '../../../utiles/constants';\r\nimport { Audios, Videos } from '../../components/converter-file';\r\nconst BASE_API_URL = ENVIRONMENT_VARIABLES.BASE_API_URL;\r\n\r\n\r\nexport async function compressorApi(body) {\r\n    let config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    };\r\n    try {\r\n        let response = {};\r\n\r\n        response = await API.post(`${BASE_API_URL}/file-info/video-compress`, body, config);\r\n        console.log(\"Data::::::::::::::: resposne::::::::::: \", response.data)\r\n\r\n        return response?.data;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}","import React, { useMemo, useState } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport Loader from '../../components/loder';\r\nimport { errorMessageAlert, successMessageAlert } from '../../components//alert';\r\nimport { Card, Col, Form, Row } from 'react-bootstrap';\r\nimport FileSizeInMB from './target-a-file-size-components/file-size-in-mb';\r\nimport FileSizeInPercentage from './target-a-file-size-components/file-size-in-percentage';\r\nimport { compressorApi } from './api';\r\nimport { fileUploadApi, removeFile } from '../../../utiles/file-upload-api';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { fileDownload } from '../../video-converter/converter-page/api';\r\n\r\nconst baseStyle = {\r\n    flex: 1,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: '80px',\r\n    borderWidth: 2,\r\n    borderRadius: 2,\r\n    borderColor: '#eeeeee',\r\n    borderStyle: 'dashed',\r\n    backgroundColor: '#3c3c3c',\r\n    backgroundImage: 'linear-gradient(45deg, rgba(0, 0, 0, .06) 25%, transparent 0), linear-gradient(-45deg, rgba(0, 0, 0, .06) 25%, transparent 0), linear-gradient(45deg, transparent 75%, rgba(0, 0, 0, .06) 0), linear-gradient(-45deg, transparent 75%, rgba(0, 0, 0, .06) 0)',\r\n    backgroundSize: '24px 24px',\r\n    backgroundPosition: '0 0, 0 12px, 12px -12px, -12px 0',\r\n    color: '#bdbdbd',\r\n    outline: 'none',\r\n    transition: 'border .24s ease-in-out'\r\n};\r\n\r\nconst activeStyle = {\r\n    borderColor: '#2196f3'\r\n};\r\n\r\nconst acceptStyle = {\r\n    borderColor: '#00e676'\r\n};\r\n\r\nconst rejectStyle = {\r\n    borderColor: '#ff1744'\r\n};\r\n\r\nconst styleFile = {\r\n    btnColor: {\r\n        backgroundColor: '#f33',\r\n        color: 'white'\r\n    }\r\n}\r\n\r\nconst videoCodecValues = [\"264\", \"265\"];\r\n// const compressionMethodValues = [\"Target a video resolution\", \"Target a file size (MB)\", \"Target a file size (Percentage)\", \"Target a video quilty\", \"Target a max bitrate\"];\r\nconst compressionMethodValues = [\"Target a file size (MB)\", \"Target a file size (Percentage)\"];\r\n\r\nfunction VideoCompressorForm(props) {\r\n    const [imageData, setImageData] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [isFileUploadOrConvert, setIsFileUploadOrConvert] = useState(null);\r\n    const [videoCodec, setVideoCodec] = useState(videoCodecValues[0]);\r\n    const [compressionMethod, setCompressionMethod] = useState(compressionMethodValues[0]);\r\n    const [compressionMethodIndex, setCompressionMethodIndex] = useState(0);\r\n    const [sizeInMB, setSizeInMB] = useState(1);\r\n    const [sizeInPercentage, setSizeInPercentage] = useState(60);\r\n    const [uploadBtn, setUploadBtn] = useState(false);\r\n    const [convertBtn, setConvertBtn] = useState(false);\r\n    const [downloadBtn, setDownloadBtn] = useState(false);\r\n    const [downloadLink, setDownloadLink] = useState(null);\r\n    const [fileNameAny, setFileNameAny] = useState(null);\r\n    const [fileNameWithId, setFileNameWithId] = useState({});\r\n\r\n    const {\r\n        getRootProps,\r\n        getInputProps,\r\n        open,\r\n        isDragActive,\r\n        isDragAccept,\r\n        isDragReject\r\n    } = useDropzone({\r\n        // accept: 'image/*',\r\n    });\r\n\r\n    const style = useMemo(() => ({\r\n        ...baseStyle,\r\n        ...(isDragActive ? activeStyle : {}),\r\n        ...(isDragAccept ? acceptStyle : {}),\r\n        ...(isDragReject ? rejectStyle : {})\r\n    }), [\r\n        isDragActive,\r\n        isDragReject,\r\n        isDragAccept\r\n    ]);\r\n\r\n    const handleRemoveFile = async () => {\r\n        if (convertBtn == true || downloadBtn == true) {\r\n            const removeFileRes = await removeFile(fileNameAny);\r\n            if (removeFileRes == true) {\r\n                setFileNameAny(null);\r\n                setImageData(null);\r\n                setDownloadLink(null);\r\n                setDownloadBtn(false);\r\n                setConvertBtn(false);\r\n                setUploadBtn(false);\r\n            }\r\n        } else if (uploadBtn == true) {\r\n            setFileNameAny(null);\r\n            setImageData(null);\r\n            setDownloadLink(null);\r\n            setDownloadBtn(false);\r\n            setConvertBtn(false);\r\n            setUploadBtn(false);\r\n        }\r\n        // const removeFileRes = await removeFile(fileNameAny);\r\n\r\n\r\n    }\r\n\r\n    const fileHandleChange = async (e) => {\r\n        let removeFileRes = true;\r\n        if (downloadBtn == true || convertBtn == true) {\r\n            /* Remove file from cloud which is uploaded */\r\n            // removeFileRes = false;\r\n            removeFileRes = await removeFile(fileNameAny);\r\n        }\r\n\r\n        if (removeFileRes) {\r\n            setDownloadBtn(false);\r\n            setConvertBtn(false);\r\n            setUploadBtn(true);\r\n            const file = e.target.files[0];\r\n            setFileNameAny(file?.name);\r\n            setDownloadLink(null);\r\n            setImageData(file);\r\n        }\r\n\r\n    }\r\n\r\n    const handleUpload = async () => {\r\n        setIsFileUploadOrConvert(\"File Uploading...\");\r\n        setIsLoaded(true);\r\n        const body = {\r\n            file: imageData\r\n        };\r\n        try {\r\n            const fileUploadRes = await fileUploadApi(body);\r\n            if (fileUploadRes?.code == 200) {\r\n                setUploadBtn(false);\r\n                setConvertBtn(true);\r\n                setDownloadBtn(false);\r\n                setFileNameAny(fileUploadRes?.items?.name);\r\n                setFileNameWithId(fileUploadRes?.items);\r\n                // setFileName(`${file?.name} is ready for convert...`);\r\n                successMessageAlert(`${fileUploadRes?.items?.name} uploaded successfully!`)\r\n\r\n            } else {\r\n                errorMessageAlert(\"File dose not uploaded due to internal error!\");\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error(\"Error::::::::: handle convert function\", error);\r\n            errorMessageAlert();\r\n        } finally {\r\n            setIsLoaded(false);\r\n            setIsFileUploadOrConvert(null);\r\n        }\r\n    }\r\n\r\n    const handleConvert = async () => {\r\n        setIsFileUploadOrConvert(\"File Compressing...\");\r\n        setIsLoaded(true);\r\n\r\n        try {\r\n            const body = {\r\n                id: fileNameWithId?.id,\r\n                name: fileNameWithId?.name,\r\n                videoCodec: videoCodec,\r\n                compressionMethod: compressionMethod,\r\n                sizeInMB: sizeInMB,\r\n                sizeInPercentage: sizeInPercentage\r\n            };\r\n            const convertFileResponse = await compressorApi(body);\r\n            if (convertFileResponse?.code >= 200 || convertFileResponse?.code < 205) {\r\n                setImageData(null);\r\n                setDownloadBtn(true);\r\n                setUploadBtn(false);\r\n                setConvertBtn(false);\r\n                setFileNameAny(convertFileResponse?.items?.name);\r\n                setDownloadLink(convertFileResponse?.items?.name);\r\n\r\n                successMessageAlert(convertFileResponse.message) //Show alert after convert\r\n            } else {\r\n                errorMessageAlert();\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error::::::::: handle convert function\", error);\r\n            errorMessageAlert();\r\n        } finally {\r\n            setIsLoaded(false);\r\n            setIsFileUploadOrConvert(null);\r\n        }\r\n\r\n    }\r\n\r\n    const handleDownload = async () => {\r\n        try {\r\n            const downloadedFile = await fileDownload(downloadLink);\r\n            console.log(\"File:::::::::\", downloadedFile)\r\n        } catch (error) {\r\n            console.error(\"Error::::::::: handle convert function\", error);\r\n            errorMessageAlert();\r\n        } finally {\r\n        }\r\n    }\r\n\r\n    const handleCompressionMethod = (e) => {\r\n        console.log(\"Compression Method\", compressionMethodValues[e.target.value]);\r\n        const selectedIndex = e.target.value;\r\n        setCompressionMethodIndex(selectedIndex);\r\n        setCompressionMethod(compressionMethodValues[selectedIndex]);\r\n    }\r\n\r\n    const handleTargetSizeInMB = (e) => {\r\n        const value = e.target.value;\r\n        if (sizeInMB < 1) {\r\n            setSizeInMB(1);\r\n        } else {\r\n            setSizeInMB(value);\r\n        }\r\n    }\r\n\r\n    const handleTargetSizeInPercentage = (e) => {\r\n        const value = e.target.value;\r\n        if (sizeInPercentage < 1) {\r\n            setSizeInPercentage(1);\r\n        } else if (value > 100) {\r\n            setSizeInPercentage(100);\r\n        } else {\r\n            setSizeInPercentage(value)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"\">\r\n                    {\r\n                        uploadBtn || convertBtn || downloadBtn ? (\r\n                            <div className='d-flex justify-content-end'>\r\n                                <div>\r\n                                    {fileNameAny}\r\n                                </div>\r\n                                <div className=''>\r\n                                    <div>\r\n                                        {\r\n                                            uploadBtn ? (\r\n                                                <button type=\"button\" style={styleFile.btnColor} disabled={isLoaded} className=\"btn\" onClick={handleUpload}>\r\n                                                    Upload\r\n                                                </button>\r\n                                            ) : convertBtn ? (\r\n                                                <button type=\"button\" style={styleFile.btnColor} disabled={isLoaded} className=\"btn\" onClick={handleConvert}>\r\n                                                    Compress\r\n                                                </button>\r\n                                            ) : downloadBtn ? (\r\n                                                <button type=\"button\" disabled={isLoaded} style={styleFile.btnColor} className=\"btn\" onClick={handleDownload}>\r\n                                                    Download File\r\n                                                </button>\r\n                                            ) : ''\r\n                                        }\r\n                                    </div>\r\n                                    <div>\r\n                                        <FontAwesomeIcon className=\"text-danger\" style={{ fontSize: '24px', cursor: 'pointer' }} title=\"Remove file\" icon={faTimes} onClick={handleRemoveFile} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ) : ''\r\n                    }\r\n                </div>\r\n\r\n                {\r\n                    isLoaded ? (\r\n                        <>\r\n                            <div style={{ textAlign: \"center\" }}>\r\n                                <h5>{isFileUploadOrConvert}</h5>\r\n                            </div>\r\n                            <Loader isLoaded={isLoaded} />\r\n                        </>\r\n                    ) : (\r\n                        <div {...getRootProps({ style })} onChange={fileHandleChange}>\r\n                            <input {...getInputProps()} onChange={fileHandleChange} />\r\n                            <p>Drag 'n' drop some files here, or click to select files</p>\r\n\r\n                            <button type=\"button\" className=\"btn p-3 mt-3\" style={styleFile.btnColor} >\r\n                                Open File Dialog\r\n                            </button>\r\n                        </div>\r\n                    )\r\n                }\r\n\r\n                <Card className=\"mt-3\" style={{ display: isLoaded ? \"none\" : \"block\", }}>\r\n                    <Card.Header className=\"display-6\">\r\n                        Advanced Setting\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <Card.Title className=\"text-center mb-2 pb-3\" style={{ borderBottom: '1px solid gray', fontSize: '20px' }}>\r\n                            Video Quilty & Size\r\n                        </Card.Title>\r\n                        <Form>\r\n                            <Row className=\"mt-3\">\r\n                                <Col xs={4} className=\"text-end\">\r\n                                    <Form.Label>Video Codec</Form.Label>\r\n                                </Col>\r\n                                <Col xs={8}>\r\n                                    <Form.Select size=\"sm\" onChange={(e) => {\r\n                                        setVideoCodec(videoCodecValues[e.target.value]);\r\n                                    }}>\r\n                                        {\r\n                                            videoCodecValues.map((value, index) => {\r\n                                                return <option key={index} value={index}>\r\n                                                    H{value}\r\n                                                </option>\r\n                                            })\r\n                                        }\r\n                                    </Form.Select>\r\n                                    <Form.Text className=\"text-muted\">\r\n                                        H265 codec can reduce video size 20-75% more compared to H264 (especially high-resolution video)\r\n                                    </Form.Text>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row className=\"mt-3\">\r\n                                <Col xs={4} className=\"text-end\">\r\n                                    <Form.Label>Compression Method</Form.Label>\r\n                                </Col>\r\n                                <Col xs={8}>\r\n                                    <Form.Select size=\"sm\" onChange={handleCompressionMethod}>\r\n                                        {\r\n                                            compressionMethodValues.map((value, index) => {\r\n                                                return <option key={index} value={index}>\r\n                                                    {value}\r\n                                                </option>\r\n                                            })\r\n                                        }\r\n                                    </Form.Select>\r\n                                    <Form.Text className=\"text-muted\">\r\n                                        Choose \"Target a file size\" to get an exact output file size. Choose \"Target a video quality\" when quality is of importance.\r\n                                    </Form.Text>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            {/* <FileSizeInPercentage /> */}\r\n                            {\r\n                                compressionMethodIndex == 0 ? <FileSizeInMB sizeInMB={sizeInMB} handleTargetSizeInMB={handleTargetSizeInMB} /> : compressionMethodIndex == 1 ? <FileSizeInPercentage sizeInPercentage={sizeInPercentage} handleTargetSizeInPercentage={handleTargetSizeInPercentage} /> : \"\"\r\n                            }\r\n\r\n                            <Row className=\"mt-3\">\r\n                                <Col xs={4} className=\"text-end\">\r\n                                    <Form.Label>Make video compatible with old devices?</Form.Label>\r\n                                </Col>\r\n                                <Col xs={8}>\r\n                                    <Form.Check type=\"checkbox\" />\r\n                                    <Form.Check.Label className=\"text-muted\">Only use this option if you plan to play the video on a really old device or if you are having playback issues (it compress less)</Form.Check.Label>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        </Form>\r\n                    </Card.Body>\r\n                </Card>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default VideoCompressorForm;\r\n","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport VideoCompressorForm from './video-compressor-dropzone-area';\r\n\r\n\r\nfunction VideoComressorUI(props) {\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"text-center mt-5\">\r\n                    <h1 style={{color: '#f33'}}><span className=\"text-uppercase\">Video</span> Compressor</h1>\r\n                    <h6 className=\"lead\">Compress your files for free</h6>\r\n                </div>\r\n                <div className=\"mt-4 mb-4\">\r\n                    <VideoCompressorForm />\r\n                </div>\r\n                <Card>\r\n                    <Card.Header>Ths is Card Header</Card.Header>\r\n                    <Card.Body>\r\n                        This is card body\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default VideoComressorUI;\r\n","export const Videos = [\r\n    {\r\n        name: 'MP4',\r\n        path: 'mp4-converter',\r\n    },\r\n    {\r\n        name: 'WEBM',\r\n        path: 'webm-converter',\r\n    },\r\n    {\r\n        name: 'FLV',\r\n        path: 'flv-converter',\r\n    },\r\n    {\r\n        name: 'MKV',\r\n        path: 'mkv-converter',\r\n    },\r\n    {\r\n        name: 'AVI',\r\n        path: 'avi-converter',\r\n    },\r\n    {\r\n        name: 'MOV',\r\n        path: 'mov-converter',\r\n    },\r\n    {\r\n        name: '3GP',\r\n        path: '3gp-converter',\r\n    },\r\n    {\r\n        name: 'WMV',\r\n        path: 'wmv-converter',\r\n    },\r\n]\r\n\r\nexport const Audios = [\r\n    {\r\n        name: \"MP3\",\r\n        path: \"mp3-converter\"\r\n    },\r\n    {\r\n        name: \"WMA\",\r\n        path: \"wma-converter\"\r\n    },\r\n    {\r\n        name: \"MAV\",\r\n        path: \"MAV-converter\"\r\n    },\r\n    {\r\n        name: \"FLAC\",\r\n        path: \"flac-converter\"\r\n    },  \r\n    {\r\n        name: \"MA4\",\r\n        path: \"ma4-converter\"\r\n    },\r\n    {\r\n        name: \"ALAC\",\r\n        path: \"alac-converter\"\r\n    },\r\n    {\r\n        name: \"AMR\",\r\n        path: \"amr-converter\"\r\n    },\r\n    {\r\n        name: \"OGG\",\r\n        path: \"ogg-converter\"\r\n    },\r\n    {\r\n        name: \"AIFF\",\r\n        path: \"aiff-converter\"\r\n    },\r\n    {\r\n        name: \"AAC\",\r\n        path: \"aac-converter\"\r\n    },\r\n]\r\n\r\nexport const VideoCompressorType = [\r\n    {\r\n        name: \"Video Compressor\",\r\n        path: \"video-compressor\"\r\n    },\r\n]\r\n\r\nexport const Mp4ToMp3 = [\r\n    {\r\n        name: \"MP4 To MP3\",\r\n        path: \"mp4-to-mp3\",\r\n    },\r\n]\r\n","const ENVIRONMENT_VARIABLES = {\r\n    // BASE_API_URL: 'http://ec2-54-187-96-121.us-west-2.compute.amazonaws.com:3000/v1/',\r\n    // BASE_API_URL: 'http://localhost:3000/api/v1/',\r\n    BASE_API_URL: 'https://smallconverter.io/api/v1',\r\n    // BASE_API_URL: 'https://coverter-rubeel.herokuapp.com/api/v1/',\r\n  };\r\n  \r\n  export { ENVIRONMENT_VARIABLES };\r\n  ","import axios from 'axios';\r\nimport { ENVIRONMENT_VARIABLES } from './constants';\r\n\r\nexport default axios.create({\r\n  baseURL: ENVIRONMENT_VARIABLES.BASE_API_URL,\r\n  responseType: 'json',\r\n});\r\n","import Swal from 'sweetalert2';\r\n\r\nexport const successMessageAlert = (message = \"Converted your media successfully!\") => {\r\n    Swal.fire(\"Success\", message, \"success\");\r\n};\r\n\r\nexport const errorMessageAlert = (message=\"Internal error\") => {\r\n    Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Oops...\",\r\n        text: message,\r\n        // footer: '<a href=\"\">Why do I have this issue?</a>',\r\n    });\r\n};\r\n\r\nexport const confrimAlert = (message) => {\r\n    Swal.fire({\r\n        title: 'Are you sure?',\r\n        text: \"You won't be able to revert this!\",\r\n        icon: 'warning',\r\n        showCancelButton: true,\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n        confirmButtonText: 'Yes, delete it!'\r\n      }).then((result) => {\r\n        if (result.isConfirmed) {\r\n          Swal.fire(\r\n            'Deleted!',\r\n            'Your file has been deleted.',\r\n            'success'\r\n          )\r\n        }\r\n      })\r\n}","import React from \"react\";\r\nimport { ScaleLoader } from \"react-spinners\";\r\n// import { css } from \"@emotion/core\";\r\n\r\n// CSS  properties of loader\r\n// const override = css`\r\n//   display: block;\r\n// `;\r\n\r\nfunction Loader(props) {\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"sweet-loading\"\r\n        style={{ textAlign: \"center\", marginTop: \"5%\" }}\r\n      >\r\n        <ScaleLoader\r\n          // css={override}\r\n          color={\"blue\"}\r\n          height={100}\r\n          loading={props.isLoaded}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n","import Swal from 'sweetalert2';\r\nimport { errorMessageAlert } from '../views/components/alert';\r\nimport API from './API';\r\nimport { ENVIRONMENT_VARIABLES } from './constants';\r\nconst BASE_API_URL = ENVIRONMENT_VARIABLES.BASE_API_URL;\r\n\r\n\r\nexport async function fileUploadApi(body) {\r\n    let config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    };\r\n    try {\r\n        let response = {};\r\n        let formData = new FormData();\r\n        formData.append(\"file\", body.file);\r\n\r\n        response = await API.post(`${BASE_API_URL}/file-info/file-upload`, formData, config);\r\n\r\n        return response?.data;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function fileRemoveApi(body) {\r\n    let config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    };\r\n    try {\r\n        let response = {};\r\n\r\n        response = await API.post(`${BASE_API_URL}/file-info/remove-file`, body, config);\r\n\r\n        return response?.data;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const removeFile = async (fileName) => {\r\n    const body = {\r\n        name: fileName,\r\n    }\r\n    try {\r\n        \r\n        const result = await Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: `You want to remove ${fileName}`,\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, remove it!'\r\n        });\r\n\r\n        if (result.isConfirmed) {\r\n            const removeFileRes = await fileRemoveApi(body)\r\n            Swal.fire(\r\n                'Removed!',\r\n                'Your file has been Removed.',\r\n                'success'\r\n            )\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n\r\n\r\n    } catch (error) {\r\n        console.error(\"Error::::::::: handle remove file function\", error);\r\n        errorMessageAlert();\r\n    }\r\n}"],"sourceRoot":""}
{"version":3,"sources":["views/video-converter/converter-page/api.js","views/video-converter/converter-page/video-dropzone-area.js","views/video-converter/converter-page/index.js","views/audio-converter/converter-page/api.js","views/audio-converter/converter-page/index.js","views/components/converter-file.js","utiles/constants.js","utiles/API.js","views/components/alert.js","views/components/loder.js","utiles/file-upload-api.js"],"names":["BASE_API_URL","ENVIRONMENT_VARIABLES","converterApi","body","type","converter","a","config","headers","response","toLowerCase","_","find","Videos","video","name","API","post","obj","code","message","items","data","Audios","audio","fileDownload","file_name","fetch","then","blob","myBlob","URL","createObjectURL","Blob","link","document","createElement","href","window","download","click","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","backgroundImage","backgroundSize","backgroundPosition","color","outline","transition","activeStyle","acceptStyle","rejectStyle","styleFile","btnColor","VideoDropzoneArea","props","useState","imageData","setImageData","uploadBtn","setUploadBtn","convertBtn","setConvertBtn","downloadBtn","setDownloadBtn","isLoaded","setIsLoaded","isFileUploadOrConvert","setIsFileUploadOrConvert","downloadLink","setDownloadLink","fileNameAny","setFileNameAny","fileNameWithId","setFileNameWithId","useDropzone","getRootProps","getInputProps","open","isDragActive","isDragAccept","isDragReject","style","useMemo","handleRemoveFile","removeFile","fileHandleChange","e","removeFileRes","file","target","files","handleUpload","fileUploadApi","fileUploadRes","successMessageAlert","errorMessageAlert","console","error","handleConvert","converterType","convertFileResponse","handleDownload","downloadedFile","log","className","disabled","onClick","fontSize","cursor","title","icon","faTimes","textAlign","onChange","Header","Body","VideoConverterUI","useParams","video_type","split","AudioConverterUI","audio_type","path","VideoCompressorType","Mp4ToMp3","axios","create","baseURL","responseType","Swal","fire","text","Loader","marginTop","height","loading","formData","FormData","append","fileRemoveApi","fileName","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","isConfirmed"],"mappings":"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","file":"static/js/5.e92fcb87.chunk.js","sourcesContent":["import API from '../../../utiles/API';\r\nimport _ from 'lodash';\r\nimport { ENVIRONMENT_VARIABLES } from '../../../utiles/constants';\r\nimport { Audios, Videos } from '../../components/converter-file';\r\nconst BASE_API_URL = ENVIRONMENT_VARIABLES.BASE_API_URL;\r\n\r\n\r\nexport async function converterApi(body, type, converter) {\r\n    let config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    };\r\n    try {\r\n        let response = {};\r\n\r\n        if (converter.toLowerCase() == \"video\") {\r\n            const is_video_converter = _.find(Videos, function (video) { return video?.name.toLowerCase() === type.toLowerCase(); });\r\n            if (is_video_converter) {\r\n                response = await API.post(`${BASE_API_URL}/file-info/video-converter?to=${type}`, body, config);\r\n            } else {\r\n                const obj = {\r\n                    code: 400,\r\n                    message: `${type} is not supported`,\r\n                    items: [],\r\n                }\r\n                response.data = obj;\r\n            }\r\n        } else if (converter.toLowerCase() == \"audio\") {\r\n            const is_audio_converter = _.find(Audios, function (audio) { return audio?.name.toLowerCase() === type.toLowerCase(); });\r\n\r\n            if (is_audio_converter) {\r\n                response = await API.post(`${BASE_API_URL}/file-info/audio-converter?to=${type}`, body, config);\r\n            } else {\r\n                const obj = {\r\n                    code: 400,\r\n                    message: `${type} is not supported`,\r\n                    items: [],\r\n                }\r\n                response.data = obj;\r\n            }\r\n        } else if (converter.toLowerCase() == \"mp4-to-mp3\") {\r\n            response = await API.post(`${BASE_API_URL}/file-info/audio-converter`, body, config);\r\n        }\r\n\r\n        return response?.data;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function fileDownload(file_name) {\r\n    let config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    };\r\n    try {\r\n        fetch(`${BASE_API_URL}file-info/download?file_name=${file_name}`)\r\n            .then(response => response.blob())\r\n            .then(function (myBlob) {\r\n                var objectURL = URL.createObjectURL(myBlob);\r\n                const blob = new Blob([myBlob]);\r\n                const link = document.createElement('a');\r\n                link.href = window.URL.createObjectURL(blob);\r\n                link.download = `${file_name}`;\r\n                link.click();\r\n\r\n            })\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}","import React, { useMemo, useState } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { converterApi, fileDownload } from './api';\r\nimport Loader from '../../components/loder';\r\nimport { errorMessageAlert, successMessageAlert } from '../../components/alert';\r\nimport { fileUploadApi, removeFile } from '../../../utiles/file-upload-api';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nconst baseStyle = {\r\n    flex: 1,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: '80px',\r\n    borderWidth: 2,\r\n    borderRadius: 2,\r\n    borderColor: '#eeeeee',\r\n    borderStyle: 'dashed',\r\n    backgroundColor: '#3c3c3c',\r\n    backgroundImage: 'linear-gradient(45deg, rgba(0, 0, 0, .06) 25%, transparent 0), linear-gradient(-45deg, rgba(0, 0, 0, .06) 25%, transparent 0), linear-gradient(45deg, transparent 75%, rgba(0, 0, 0, .06) 0), linear-gradient(-45deg, transparent 75%, rgba(0, 0, 0, .06) 0)',\r\n    backgroundSize: '24px 24px',\r\n    backgroundPosition: '0 0, 0 12px, 12px -12px, -12px 0',\r\n    color: '#bdbdbd',\r\n    outline: 'none',\r\n    transition: 'border .24s ease-in-out'\r\n};\r\n\r\nconst activeStyle = {\r\n    borderColor: '#2196f3'\r\n};\r\n\r\nconst acceptStyle = {\r\n    borderColor: '#00e676'\r\n};\r\n\r\nconst rejectStyle = {\r\n    borderColor: '#ff1744'\r\n};\r\n\r\nconst styleFile = {\r\n    btnColor: {\r\n        backgroundColor: '#f33',\r\n        color: 'white'\r\n    }\r\n}\r\n\r\n\r\nfunction VideoDropzoneArea(props) {\r\n    const [imageData, setImageData] = useState(null);\r\n    const [uploadBtn, setUploadBtn] = useState(false);\r\n    const [convertBtn, setConvertBtn] = useState(false);\r\n    const [downloadBtn, setDownloadBtn] = useState(false);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [isFileUploadOrConvert, setIsFileUploadOrConvert] = useState(null);\r\n    const [downloadLink, setDownloadLink] = useState(null);\r\n    const [fileNameAny, setFileNameAny] = useState(null);\r\n    const [fileNameWithId, setFileNameWithId] = useState({});\r\n\r\n\r\n    const {\r\n        getRootProps,\r\n        getInputProps,\r\n        open,\r\n        isDragActive,\r\n        isDragAccept,\r\n        isDragReject\r\n    } = useDropzone({\r\n        // accept: 'image/*',\r\n    });\r\n\r\n    const style = useMemo(() => ({\r\n        ...baseStyle,\r\n        ...(isDragActive ? activeStyle : {}),\r\n        ...(isDragAccept ? acceptStyle : {}),\r\n        ...(isDragReject ? rejectStyle : {})\r\n    }), [\r\n        isDragActive,\r\n        isDragReject,\r\n        isDragAccept\r\n    ]);\r\n\r\n\r\n    const handleRemoveFile = async () => {\r\n        if (convertBtn == true || downloadBtn == true) {\r\n            const removeFileRes = await removeFile(fileNameAny);\r\n            if (removeFileRes == true) {\r\n                setFileNameAny(null);\r\n                setImageData(null);\r\n                setDownloadLink(null);\r\n                setDownloadBtn(false);\r\n                setConvertBtn(false);\r\n                setUploadBtn(false);\r\n            }\r\n        } else if (uploadBtn == true) {\r\n            setFileNameAny(null);\r\n            setImageData(null);\r\n            setDownloadLink(null);\r\n            setDownloadBtn(false);\r\n            setConvertBtn(false);\r\n            setUploadBtn(false);\r\n        }\r\n        // const removeFileRes = await removeFile(fileNameAny);\r\n\r\n\r\n    }\r\n\r\n    const fileHandleChange = async (e) => {\r\n        let removeFileRes = true;\r\n        if (downloadBtn == true || convertBtn == true) {\r\n            /* Remove file from cloud which is uploaded */\r\n            // removeFileRes = false;\r\n            removeFileRes = await removeFile(fileNameAny);\r\n        }\r\n\r\n        if (removeFileRes) {\r\n            setDownloadBtn(false);\r\n            setConvertBtn(false);\r\n            setUploadBtn(true);\r\n            const file = e.target.files[0];\r\n            setFileNameAny(file?.name);\r\n            setDownloadLink(null);\r\n            setImageData(file);\r\n        }\r\n\r\n    }\r\n\r\n    const handleUpload = async () => {\r\n        setIsFileUploadOrConvert(\"File Uploading...\");\r\n        setIsLoaded(true);\r\n        const body = {\r\n            file: imageData\r\n        };\r\n        try {\r\n            const fileUploadRes = await fileUploadApi(body);\r\n            if (fileUploadRes?.code == 200) {\r\n                setUploadBtn(false);\r\n                setConvertBtn(true);\r\n                setDownloadBtn(false);\r\n                setFileNameAny(fileUploadRes?.items?.name);\r\n                setFileNameWithId(fileUploadRes?.items);\r\n                // setFileName(`${file?.name} is ready for convert...`);\r\n                successMessageAlert(`${fileUploadRes?.items?.name} uploaded successfully!`)\r\n\r\n            } else {\r\n                errorMessageAlert(\"File dose not uploaded due to internal error!\");\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error(\"Error::::::::: handle convert function\", error);\r\n            errorMessageAlert();\r\n        } finally {\r\n            setIsLoaded(false);\r\n            setIsFileUploadOrConvert(null);\r\n        }\r\n    }\r\n\r\n    const handleConvert = async () => {\r\n        setIsFileUploadOrConvert(\"File Converting...\");\r\n        setIsLoaded(true);\r\n\r\n        try {\r\n            const convertFileResponse = await converterApi(fileNameWithId, props.converterType, props.converter);\r\n            if (convertFileResponse?.code >= 200 || convertFileResponse?.code < 205) {\r\n                setImageData(null);\r\n                setDownloadBtn(true);\r\n                setUploadBtn(false);\r\n                setConvertBtn(false);\r\n                setFileNameAny(convertFileResponse?.items?.name)\r\n                setDownloadLink(convertFileResponse?.items?.name);\r\n\r\n                successMessageAlert(convertFileResponse.message) //Show alert after convert\r\n            } else {\r\n                errorMessageAlert();\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error::::::::: handle convert function\", error);\r\n            errorMessageAlert();\r\n        } finally {\r\n            setIsLoaded(false);\r\n            setIsFileUploadOrConvert(null);\r\n        }\r\n    }\r\n\r\n    const handleDownload = async () => {\r\n        try {\r\n            const downloadedFile = await fileDownload(downloadLink);\r\n            console.log(\"File:::::::::\", downloadedFile)\r\n        } catch (error) {\r\n            console.error(\"Error::::::::: handle convert function\", error);\r\n            errorMessageAlert();\r\n        } finally {\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"\">\r\n                    {\r\n                        uploadBtn || convertBtn || downloadBtn ? (\r\n                            <table className=\"table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th>{fileNameAny}</th>\r\n                                        <th>\r\n                                            {\r\n                                                uploadBtn ? (\r\n                                                    <button type=\"button\" style={styleFile.btnColor} disabled={isLoaded} className=\"btn\" onClick={handleUpload}>\r\n                                                        Upload\r\n                                                    </button>\r\n                                                ) : convertBtn ? (\r\n                                                    <button type=\"button\" style={styleFile.btnColor} disabled={isLoaded} className=\"btn\" onClick={handleConvert}>\r\n                                                        Convert\r\n                                                    </button>\r\n                                                ) : downloadBtn ? (\r\n                                                    <button type=\"button\" disabled={isLoaded} style={styleFile.btnColor} className=\"btn\" onClick={handleDownload}>\r\n                                                        Download File\r\n                                                    </button>\r\n                                                ) : ''\r\n                                            }\r\n                                        </th>\r\n                                        <th><FontAwesomeIcon className=\"text-danger\" style={{ fontSize: '24px', cursor: 'pointer' }} title=\"Remove file\" icon={faTimes} onClick={handleRemoveFile} /></th>\r\n                                    </tr>\r\n\r\n                                </tbody>\r\n                            </table>\r\n                        ) : ''\r\n                    }\r\n                </div>\r\n                {\r\n                    isLoaded ? (\r\n                        <>\r\n                            <div style={{ textAlign: \"center\" }}>\r\n                                <h5>{isFileUploadOrConvert}</h5>\r\n                            </div>\r\n                            <Loader isLoaded={isLoaded} />\r\n                        </>\r\n                    ) : (\r\n                        <div {...getRootProps({ style })}>\r\n                            <input {...getInputProps()} onChange={fileHandleChange} />\r\n                            <p>Drag 'n' drop some files here, or click to select files</p>\r\n\r\n                            <button type=\"button\" className=\"btn p-3 mt-3\" style={styleFile.btnColor} onClick={open}>\r\n                                Open File Dialog\r\n                            </button>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n            <div>\r\n                <Card>\r\n                    <Card.Header>This is card header1</Card.Header>\r\n                    <Card.Body>\r\n                        This is card body 1\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default VideoDropzoneArea;\r\n","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport { useParams } from 'react-router';\r\nimport DropzoneArea from './video-dropzone-area';\r\n\r\nfunction VideoConverterUI(props) {\r\n    const { video_type } = useParams();\r\n    const converterType = video_type.split(\"-\")[0];\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"text-center mt-5\">\r\n                    <h1 style={{color: '#f33'}}><span className=\"text-uppercase\">{converterType}</span> Converter</h1>\r\n                    <h2 className=\"lead\">Convert your Video to and from <span className=\"text-uppercase\">{converterType}</span>, for free</h2>\r\n                </div>\r\n                <div className=\"mt-5\">\r\n                    <DropzoneArea converterType={converterType} converter=\"video\" />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default VideoConverterUI;\r\n","import API from '../../../utiles/API';\r\nimport _ from 'lodash';\r\nimport { ENVIRONMENT_VARIABLES } from '../../../utiles/constants';\r\nimport { Audios } from '../../components/converter-file';\r\nconst BASE_API_URL = ENVIRONMENT_VARIABLES.BASE_API_URL;\r\n\r\n\r\nexport async function converterApi(body, type) {\r\n    let config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    };\r\n    try {\r\n        let response = {};\r\n        // let formData = new FormData();\r\n        // formData.append(\"file\", body.file);\r\n        // const is_video_converter = _.find(Videos, function (video) { return video?.name.toLowerCase() === type.toLowerCase(); });\r\n        const is_audio_converter = _.find(Audios, function (audio) { return audio?.name.toLowerCase() === type.toLowerCase(); });\r\n\r\n        if (is_audio_converter) {\r\n            response = await API.post(`${BASE_API_URL}/file-info/audio-converter?to=${type}`, body, config);\r\n        } else {\r\n            console.log(\"Data::::::::: else:::::\");\r\n            const obj = {\r\n                code: 400,\r\n                message: `${type} is not supported`,\r\n                items: [],\r\n            }\r\n            response.data = obj;\r\n        }\r\n\r\n        return response?.data;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}","import React from 'react';\r\nimport { useParams } from 'react-router';\r\nimport VideoConverterUI from '../../video-converter/converter-page';\r\nimport VideoDropzoneArea from '../../video-converter/converter-page/video-dropzone-area';\r\nimport AudioDropzoneArea from './audio-dropzone-area';\r\n// import DropzoneArea from './audio-dropzone-area';\r\n\r\nfunction AudioConverterUI(props) {\r\n    const { audio_type } = useParams();\r\n    const converterType = audio_type.split(\"-\")[0];\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"text-center mt-5\">\r\n                    <h1><span className=\"text-uppercase\">{converterType}</span> Converter</h1>\r\n                    <h6 className=\"lead\">Convert your file to and from <span className=\"text-uppercase\">{converterType}</span>, for free</h6>\r\n                </div>\r\n                <div className=\"mt-4 mb-4\">\r\n                    <VideoDropzoneArea converterType={converterType} converter=\"audio\" />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AudioConverterUI;\r\n","export const Videos = [\r\n    {\r\n        name: 'MP4',\r\n        path: 'mp4-converter',\r\n    },\r\n    {\r\n        name: 'WEBM',\r\n        path: 'webm-converter',\r\n    },\r\n    {\r\n        name: 'FLV',\r\n        path: 'flv-converter',\r\n    },\r\n    {\r\n        name: 'MKV',\r\n        path: 'mkv-converter',\r\n    },\r\n    {\r\n        name: 'AVI',\r\n        path: 'avi-converter',\r\n    },\r\n    {\r\n        name: 'MOV',\r\n        path: 'mov-converter',\r\n    },\r\n    {\r\n        name: '3GP',\r\n        path: '3gp-converter',\r\n    },\r\n    {\r\n        name: 'WMV',\r\n        path: 'wmv-converter',\r\n    },\r\n]\r\n\r\nexport const Audios = [\r\n    {\r\n        name: \"MP3\",\r\n        path: \"mp3-converter\"\r\n    },\r\n    {\r\n        name: \"WMA\",\r\n        path: \"wma-converter\"\r\n    },\r\n    {\r\n        name: \"MAV\",\r\n        path: \"MAV-converter\"\r\n    },\r\n    {\r\n        name: \"FLAC\",\r\n        path: \"flac-converter\"\r\n    },  \r\n    {\r\n        name: \"MA4\",\r\n        path: \"ma4-converter\"\r\n    },\r\n    {\r\n        name: \"ALAC\",\r\n        path: \"alac-converter\"\r\n    },\r\n    {\r\n        name: \"AMR\",\r\n        path: \"amr-converter\"\r\n    },\r\n    {\r\n        name: \"OGG\",\r\n        path: \"ogg-converter\"\r\n    },\r\n    {\r\n        name: \"AIFF\",\r\n        path: \"aiff-converter\"\r\n    },\r\n    {\r\n        name: \"AAC\",\r\n        path: \"aac-converter\"\r\n    },\r\n]\r\n\r\nexport const VideoCompressorType = [\r\n    {\r\n        name: \"Video Compressor\",\r\n        path: \"video-compressor\"\r\n    },\r\n]\r\n\r\nexport const Mp4ToMp3 = [\r\n    {\r\n        name: \"MP4 To MP3\",\r\n        path: \"mp4-to-mp3\",\r\n    },\r\n]\r\n","const ENVIRONMENT_VARIABLES = {\r\n    // BASE_API_URL: 'http://ec2-54-187-96-121.us-west-2.compute.amazonaws.com:3000/v1/',\r\n    // BASE_API_URL: 'http://localhost:3000/api/v1/',\r\n    BASE_API_URL: 'https://smallconverter.io/api/v1',\r\n    // BASE_API_URL: 'https://coverter-rubeel.herokuapp.com/api/v1/',\r\n  };\r\n  \r\n  export { ENVIRONMENT_VARIABLES };\r\n  ","import axios from 'axios';\r\nimport { ENVIRONMENT_VARIABLES } from './constants';\r\n\r\nexport default axios.create({\r\n  baseURL: ENVIRONMENT_VARIABLES.BASE_API_URL,\r\n  responseType: 'json',\r\n});\r\n","import Swal from 'sweetalert2';\r\n\r\nexport const successMessageAlert = (message = \"Converted your media successfully!\") => {\r\n    Swal.fire(\"Success\", message, \"success\");\r\n};\r\n\r\nexport const errorMessageAlert = (message=\"Internal error\") => {\r\n    Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Oops...\",\r\n        text: message,\r\n        // footer: '<a href=\"\">Why do I have this issue?</a>',\r\n    });\r\n};\r\n\r\nexport const confrimAlert = (message) => {\r\n    Swal.fire({\r\n        title: 'Are you sure?',\r\n        text: \"You won't be able to revert this!\",\r\n        icon: 'warning',\r\n        showCancelButton: true,\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n        confirmButtonText: 'Yes, delete it!'\r\n      }).then((result) => {\r\n        if (result.isConfirmed) {\r\n          Swal.fire(\r\n            'Deleted!',\r\n            'Your file has been deleted.',\r\n            'success'\r\n          )\r\n        }\r\n      })\r\n}","import React from \"react\";\r\nimport { ScaleLoader } from \"react-spinners\";\r\n// import { css } from \"@emotion/core\";\r\n\r\n// CSS  properties of loader\r\n// const override = css`\r\n//   display: block;\r\n// `;\r\n\r\nfunction Loader(props) {\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"sweet-loading\"\r\n        style={{ textAlign: \"center\", marginTop: \"5%\" }}\r\n      >\r\n        <ScaleLoader\r\n          // css={override}\r\n          color={\"blue\"}\r\n          height={100}\r\n          loading={props.isLoaded}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n","import Swal from 'sweetalert2';\r\nimport { errorMessageAlert } from '../views/components/alert';\r\nimport API from './API';\r\nimport { ENVIRONMENT_VARIABLES } from './constants';\r\nconst BASE_API_URL = ENVIRONMENT_VARIABLES.BASE_API_URL;\r\n\r\n\r\nexport async function fileUploadApi(body) {\r\n    let config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    };\r\n    try {\r\n        let response = {};\r\n        let formData = new FormData();\r\n        formData.append(\"file\", body.file);\r\n\r\n        response = await API.post(`${BASE_API_URL}/file-info/file-upload`, formData, config);\r\n\r\n        return response?.data;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function fileRemoveApi(body) {\r\n    let config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    };\r\n    try {\r\n        let response = {};\r\n\r\n        response = await API.post(`${BASE_API_URL}/file-info/remove-file`, body, config);\r\n\r\n        return response?.data;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const removeFile = async (fileName) => {\r\n    const body = {\r\n        name: fileName,\r\n    }\r\n    try {\r\n        \r\n        const result = await Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: `You want to remove ${fileName}`,\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, remove it!'\r\n        });\r\n\r\n        if (result.isConfirmed) {\r\n            const removeFileRes = await fileRemoveApi(body)\r\n            Swal.fire(\r\n                'Removed!',\r\n                'Your file has been Removed.',\r\n                'success'\r\n            )\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n\r\n\r\n    } catch (error) {\r\n        console.error(\"Error::::::::: handle remove file function\", error);\r\n        errorMessageAlert();\r\n    }\r\n}"],"sourceRoot":""}